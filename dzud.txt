/*
Citations:
Abatzoglou, J.T., S.Z. Dobrowski, S.A. Parks, K.C. Hegewisch (2018). Terraclimate, a high-resolution global dataset of monthly climate and climatic water balance from 1958-2015, Scientific Data 5:170191, doi:10.1038/sdata.2017.191
Farr, T.G., Rosen, P.A., Caro, E., Crippen, R., Duren, R., Hensley, S., Kobrick, M., Paller, M., Rodriguez, E., Roth, L., Seal, D., Shaffer, S., Shimada, J., Umland, J., Werner, M., Oskin, M., Burbank, D., and Alsdorf, D.E. (2007). The shuttle radar topography mission: Reviews of Geophysics, v. 45, no. 2, RG2004, at https://doi.org/10.1029/2005RG000183.
Jarvis, A., H.I. Reuter, A. Nelson, E. Guevara (2008). Hole-filled SRTM for the globe Version 4, available from the CGIAR-CSI SRTM 90m Database: https://srtm.csi.cgiar.org.
MOD09GA.061 Terra Surface Reflectance Daily Global 1km and 500m [24-4-2024].
Muñoz Sabater, J. (2019). ERA5-Land monthly averaged data from 1981 to present. Copernicus Climate Change Service (C3S) Climate Data Store (CDS). (<date of access>), doi:10.24381/cds.68d2bb30

Script created by Sofie Hlínová, Josef Laštovička and Jan Svoboda.
*/

// MAP OPTIONS
// Set center of the map
Map.setCenter(105.0, 47.0, 4);

// DATA UPLOAD
// Mongolia boundary
var study_area = ee.FeatureCollection('projects/precuchovasofie/assets/mongolia/mongolia');

// Area for chart
var area_1 = ee.Geometry.Point([109.2117967, 47.5142068]).buffer(10000); //dzud area
var area_2 = ee.Geometry.Point([110.3736606, 45.6348238]).buffer(10000); //non-dzud area

// MAPS
// Function for masking shadow, cloud and cirrus mask in MODIS data
function modis_mask (image) {
  var qa = image.select('state_1km');
  var cloud = qa.bitwiseAnd(1 << 0).or(qa.bitwiseAnd(1 << 1));
  var shadow = qa.bitwiseAnd(1 << 2);
  var cloud_2 = qa.bitwiseAnd(1 << 10);
  var cirrus =  qa.bitwiseAnd(1 << 8).or(qa.bitwiseAnd(1 << 9));
  var mask = cloud.or(shadow).or(cloud_2).or(cirrus);
  return image.updateMask(mask.not());
}

// Calculation of indices NDMI, NDSI and NDVI
function indices_cal (img) {
  var ndmi = img.normalizedDifference(['sur_refl_b02', 'sur_refl_b06']).rename('ndmi');
  var ndsi = img.normalizedDifference(['sur_refl_b04', 'sur_refl_b06']).rename('ndsi');
  var ndvi = img.normalizedDifference(['sur_refl_b02', 'sur_refl_b01']).rename('ndvi');
  return img.addBands([ndmi,ndsi,ndvi]);
}

// Function for calculation of frozen precipitation
function froz_cal (img) {
  var froz = ee.Image(0).where(img.select('mean_2m_air_temperature').lte(273.15), 1);
  var froz_prec = froz.multiply(img.select('total_precipitation')).rename('froz_prec');
  return img.addBands(froz_prec);
}

// Calculation of relative frozen precipitation
function rela_froz_prec_cal (img){
  var rela_froz_prec = img.divide(era5_froz_prec_mean_all).subtract(1).rename('rela_froz_prec');
  return img.addBands(rela_froz_prec);
}

// Dzud function
function dzud_cal (img) {
    var dzud_ndmi = img.select('ndmi').lt(0.1).eq(1).multiply(0.5);
    var dzud_ndsi = img.select('ndsi').gt(0.3).eq(1).multiply(1.25);
    var dzud_ndvi = img.select('ndvi').lt(0.3).eq(1).multiply(0.25);
    var dzud_pdsi = img.select('pdsi').lt(-250).eq(1).multiply(1.25);
    var dzud_relative_frozen_precipitation = img.select('rela_froz_prec').gt(0.35).eq(1).multiply(1.75);
    var dzud_precipitation = img.select('total_precipitation').lt(0.2).eq(1).multiply(1.25);
    var dzud_elevation = img.select('elevation').gt(2000).eq(1).multiply(0.25);
    var dzud_slope = img.select('slope').gt(30).eq(1).multiply(0.25);
    var dzud_aspect = img.select('aspect').gte(315).or(img.select('aspect').lte(45)).eq(1).multiply(0.25);
    var dzud = dzud_ndmi.add(dzud_ndsi).add(dzud_ndvi).add(dzud_pdsi).add(dzud_relative_frozen_precipitation).add(dzud_precipitation).add(dzud_elevation).add(dzud_slope).add(dzud_aspect).rename('dzud');
    return img.addBands(dzud);
}

// Remove band calculation
function remove_band (img) {
  return img.select(
    img.bandNames().filter(
      ee.Filter.stringEndsWith('item', 'constant').not()));
}

// Define years
var start_year = 2009;
var end_year = 2019;

// Empty raster for mean frozen winter precipitation
var era5_froz_prec_mean_all = ee.Image(0).clip(study_area);

// Longterm frozen winter precipitation
for (var i = start_year; i <= end_year; i++) {
  var autumn_start = ee.Date.fromYMD(i, 9, 1);
  var era5_froz_prec_one = ee.ImageCollection('ECMWF/ERA5/DAILY')
    .filterDate(autumn_start, autumn_start.advance(6, 'month'))
    .select(['mean_2m_air_temperature', 'total_precipitation'])
    .map(froz_cal)
    .select('froz_prec')
    .sum();
  era5_froz_prec_mean_all = era5_froz_prec_mean_all.add(era5_froz_prec_one.divide(end_year-start_year+1));
}

// Empty raster for mean summer precipitation
var chirps_prec_mean_all = ee.Image(0).clip(study_area);

// Select SRTM data and create slope and aspect
var srtm = ee.Image('USGS/SRTMGL1_003').clip(study_area);
var srtm_slope = ee.Terrain.slope(srtm);
var srtm_aspect = ee.Terrain.aspect(srtm);

// Empty raster for mean dzud index
var dzud_mean = ee.Image(0).clip(study_area);

// Empty raster for anual dzud values
var dzud = ee.Image(0).clip(study_area);

// Dzud index calculation
for (var i = start_year; i <= end_year; i++) {
 
  // Winter frozen precipitation
  var autumn_start = ee.Date.fromYMD(i, 9, 1);
  var era5_froz_prec = ee.ImageCollection('ECMWF/ERA5/DAILY')
    .filterDate(autumn_start, autumn_start.advance(6, 'month'))
    .select(['mean_2m_air_temperature', 'total_precipitation'])
    .map(froz_cal)
    .select('froz_prec')
    .sum();
  var era5_froz_prec_rela = rela_froz_prec_cal(era5_froz_prec).select('rela_froz_prec');
 
  // Summer precipitation
  var summer_start = ee.Date.fromYMD(i, 6, 1);
  var era5_prec = ee.ImageCollection('ECMWF/ERA5/DAILY')
    .filterDate(autumn_start, autumn_start.advance(4, 'month'))
    .select('total_precipitation')
    .sum();

  // Palmer index from summer values
  var summer_start = ee.Date.fromYMD(i, 5, 1);
  var pdsi = ee.ImageCollection('IDAHO_EPSCOR/TERRACLIMATE')
    .filterDate(summer_start, summer_start.advance(4, 'month'))
    .select('pdsi')
    .median();

  // NDSI from winter values
  var winter_start = ee.Date.fromYMD(i, 10, 1);
  var modis_ndsi = ee.ImageCollection('MODIS/061/MOD09GA')
    .filterDate(winter_start, winter_start.advance(6, 'month'))
    .filterBounds(study_area)
    .map(modis_mask)
    .map(indices_cal)
    .select('ndsi')
    .median();

  // NDVI from spring values
  var spring_start = ee.Date.fromYMD(i, 4, 1);
  var modis_ndvi = ee.ImageCollection('MODIS/061/MOD09GA')
    .filterDate(spring_start, spring_start.advance(3, 'month'))
    .filterBounds(study_area)
    .map(modis_mask)
    .map(indices_cal)
    .select('ndvi')
    .median();

  // NDMI from summer values and add relative winter precipitation and add NDSI index for winter
  var summer_start = ee.Date.fromYMD(i, 5, 1);
  var ndmi = ee.ImageCollection('MODIS/061/MOD09GA')
    .filterDate(summer_start, summer_start.advance(4, 'month'))
    .filterBounds(study_area)
    .map(modis_mask)
    .map(indices_cal)
    .select('ndmi')
    .median();
 
  var all = ndmi
    .addBands(era5_froz_prec_rela.select('rela_froz_prec'))
    .addBands(era5_prec)
    .addBands(pdsi)
    .addBands(modis_ndsi)
    .addBands(modis_ndvi)
    .addBands(srtm)
    .addBands(srtm_slope)
    .addBands(srtm_aspect);

  // Anual dzud raster
  var dzud = dzud.addBands((dzud_cal(all)).select('dzud').rename('b' + String(i)));
 
  // Mean Dzud Raster
  var dzud_mean = dzud_mean.add(dzud.select('b' + String(i)).divide(end_year-start_year+1));
}

// Remove data free constant band from dzud layer
var dzud = remove_band(dzud);

// Add mean dzud index layer into the map
Map.addLayer(dzud_mean, {'palette': ['1a9850', '66bd63', 'a6d96a', 'd9ef8b', 'ffffbf', 'fee08b', 'fdae61', 'f46d43', 'd73027'], min: 1.5, max: 5}, 'Dzud index mean 2009–2019');

// Create maps of annual dzud index
for (var i = start_year; i <= end_year; i++) {
Map.addLayer(dzud.select('b' + String(i)), {'palette': ['1a9850', '66bd63', 'a6d96a', 'd9ef8b', 'ffffbf', 'fee08b', 'fdae61', 'f46d43', 'd73027'], min: 0, max: 6}, 'Dzud index ' + String(i));
}

// Export map of annual dzud index
Export.image.toDrive({image: dzud.unmask(100), description: 'dzud', scale: 500, crs: 'EPSG:32650', region: study_area, fileFormat: 'GeoTIFF', maxPixels: 3784216672400});

// Export map of mean dzud index
Export.image.toDrive({image: dzud_mean.unmask(100), description: 'dzud_mean', scale: 500, crs: 'EPSG:32650', region: study_area, fileFormat: 'GeoTIFF', maxPixels: 3784216672400});

// CHARTS
// Prepare data for figures
var dzud = dzud.select(ee.List(dzud.bandNames()).remove('constant').getInfo());

// Create dzud time series index mean in selected area 1
var TSChart_dzud_mean_1 = ui.Chart.image.regions({
    image: dzud,
    regions: area_1,
    reducer: ee.Reducer.mean(),
    scale: 500,
    seriesProperty: 'label',
}).setChartType('ScatterChart').setOptions({
    title: 'Dzud index (mean) for selected area 1',
    hAxis: {title: 'Date', titleTextStyle: {italic: false, bold: true}},
    vAxis: {title: 'Dzud index',titleTextStyle: {italic: false, bold: true}},
    colors: ['red'],
});

// Create dzud time series index mean in selected area 2
var TSChart_dzud_mean_2 = ui.Chart.image.regions({
    image: dzud,
    regions: area_2,
    reducer: ee.Reducer.mean(),
    scale: 500,
    seriesProperty: 'label',
}).setChartType('ScatterChart').setOptions({
    title: 'Dzud index (mean) for selected area 2',
    hAxis: {title: 'Date', titleTextStyle: {italic: false, bold: true}},
    vAxis: {title: 'Dzud index',titleTextStyle: {italic: false, bold: true}},
    colors: ['red'],
});

// Display the chart of dzud time series index mean in whole study area
print(TSChart_dzud_mean_1);
print(TSChart_dzud_mean_2);

// ACCURACY ASSESSMENT
// Layers with dzud and non-dzud areas
var dzud_validation_09_10 = ee.FeatureCollection('projects/precuchovasofie/assets/mongolia/dzud_09_10');
var dzud_validation_16_17 = ee.FeatureCollection('projects/precuchovasofie/assets/mongolia/dzud_16_17');

// Add layers with dzud and non-dzud areas
var colorTable = ee.Dictionary({
  '0': 'blue',
  '1': 'red',
});
var dzud_validation_09_10_styled = dzud_validation_09_10
  .map(function (feature) {
    return feature.set('style', {
      fillColor: colorTable.get(feature.get('dzud')),
      width: 0
    });
  })
  .style({
    styleProperty: 'style',
  });
var dzud_validation_16_17_styled = dzud_validation_16_17
  .map(function (feature) {
    return feature.set('style', {
      fillColor: colorTable.get(feature.get('dzud')),
      width: 0
    });
  })
  .style({
    styleProperty: 'style',
  });

Map.addLayer(dzud_validation_09_10_styled, {}, 'Dzud validation data 2009–2010');
Map.addLayer(dzud_validation_16_17_styled, {}, 'Dzud validation data 2016–2017');

// The n is treshold for dzud index
var n = 4.5;

// Generate binary maps of dzud, where dzud index is higher than n
var dzud_prediction_09_10 = dzud.select('b2009').gte(n);
var dzud_prediction_16_17 = dzud.select('b2016').gte(n);

// Add binary maps of dzud into map
Map.addLayer(dzud_prediction_09_10, {'palette': ['blue', 'red'], min: 0, max: 1},'Dzud prediction data 2009–2010');
Map.addLayer(dzud_prediction_16_17, {'palette': ['blue', 'red'], min: 0, max: 1},'Dzud prediction data 2016–2017');

// Export map of binary maps
Export.image.toDrive({image: dzud_prediction_09_10.unmask(100), description: 'dzud_prediction_09_10', scale: 500, crs: 'EPSG:32650', region: study_area, fileFormat: 'GeoTIFF', maxPixels: 3784216672400});
Export.image.toDrive({image: dzud_prediction_16_17.unmask(100), description: 'dzud_prediction_16_17', scale: 500, crs: 'EPSG:32650', region: study_area, fileFormat: 'GeoTIFF', maxPixels: 3784216672400});

// Generate random points for acuraccy assessment
var random_points_09_10 = ee.FeatureCollection.randomPoints(study_area, 6000, 0);
var random_points_16_17 = ee.FeatureCollection.randomPoints(study_area, 6000, 0);

// Extracting values
var sampled_points_prediction_09_10 = dzud_prediction_09_10.sampleRegions({
  collection: random_points_09_10,
  scale: 500,
  geometries: true
});
var sampled_points_prediction_16_17 = dzud_prediction_16_17.sampleRegions({
  collection: random_points_16_17,
  scale: 500,
  geometries: true
});

// Merge information from polygons to points
var spatial_filter = ee.Filter.intersects({
  leftField: '.geo',
  rightField: '.geo',
  maxError: 10
});

var save_all_join_09_10 = ee.Join.saveAll({
  matchesKey: 'sampled_points_09_10'
});
var spatial_joined_09_10 = save_all_join_09_10
  .apply({
    primary: dzud_validation_09_10,
    secondary: sampled_points_prediction_09_10,
    condition: spatial_filter
  })
  .map(function(polygon_09_10) {
    var label_09_10 = polygon_09_10.get('dzud');
    var points_09_10 = ee.FeatureCollection(ee.List(polygon_09_10.get('sampled_points_09_10')))
      .map(function (point_09_10) {
        return point_09_10.set('dzud', label_09_10);
      });
    return points_09_10;
  }).flatten();

var save_all_join_16_17 = ee.Join.saveAll({
  matchesKey: 'sampled_points_16_17'
});
var spatial_joined_16_17 = save_all_join_16_17
  .apply({
    primary: dzud_validation_16_17,
    secondary: sampled_points_prediction_16_17,
    condition: spatial_filter
  })
  .map(function(polygon_16_17) {
    var label_16_17 = polygon_16_17.get('dzud');
    var points_16_17 = ee.FeatureCollection(ee.List(polygon_16_17.get('sampled_points_16_17')))
      .map(function (point_16_17) {
        return point_16_17.set('dzud', label_16_17);
      });
    return points_16_17;
  }).flatten();

// Export accuracy assessment
Export.table.toDrive(spatial_joined_09_10, 'accuracy_assesment_09_10');
Export.table.toDrive(spatial_joined_16_17, 'accuracy_assesment_16_17');

// Define the attributes for compare in accuracy assessment
var attribute_09_10 = 'b2009';
var attribute_16_17 = 'b2016';
var attribute_dzud = 'dzud';

// Filter the points where attribute A equals attribute B
var spatial_joined_09_10_filter_equal = spatial_joined_09_10.filter(ee.Filter.equals({
  leftField: attribute_09_10,
  rightField: attribute_dzud
}));
var spatial_joined_16_17_filter_equal = spatial_joined_16_17.filter(ee.Filter.equals({
  leftField: attribute_16_17,
  rightField: attribute_dzud
}));

// Sum of all eaqual points divided with all points and recalculated into %
print('Accuracy assessment in 2009–2010 (%):', spatial_joined_09_10_filter_equal.size().divide(spatial_joined_09_10.size()).multiply(100));
print('Accuracy assessment in 2016–2017 (%):', spatial_joined_16_17_filter_equal.size().divide(spatial_joined_16_17.size()).multiply(100));

